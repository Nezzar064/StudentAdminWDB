//Format: TODO + PRIORITY/NUMBER
API is the nextttttt one
Implement spring?

Username and password integration, look in studentportal if needed. maybe encrypt password with jbCrypt.
Make a greeter message when logging in
Change primary key so its standalone, needs to be a sequence instead of autoincrement, make a seperate ID for students.
Search for students via name, not ID.
Changefunctions -> StudentService (back end)
ListFunctions -> StudentOutput (front end)

TODO: DO THIS FIRST
Fix lists for getting single variables instead of everything in controller (for listfunctions, idchecker)

Unique fix? Hvis to hedder det samme etc.

basically, your student object has a bunch of annotations regarding the database structure right?
 It's bad practice to be using this class everywhere in your code base.
  Ideally it should only be used when fetching / using the database.
  AS SOON AS you get these objects back you should convert them into another student object that DOESNT have database annotations.
  This means you can manipulate the student object without having to manipulate around the database object which can be confusing.
  You would typically use a Mapper class which would do 2 conversions, one from the database object to your new student object,
  and another from the new student object to your database object


//After this, the program is basically done.

https://www.tutorialspoint.com/spring/index.htm
https://www.liquidweb.com/kb/what-is-rest-api-an-overview/
https://www.tutorialspoint.com/microservice_architecture/microservice_architecture_introduction.htm
https://www.tutorialspoint.com/hibernate/hibernate_or_mappings.htm
https://www.tutorialspoint.com/hibernate/hibernate_mapping_files.htm

Javascript w. angular for GUI? otherwise start with simple Swing GUI or Spring.

Reasoning for UserInput and CW still static:
The object doesn't require anything, and the methods (mostly) require very little to setup.
They are less objects in a OOP sense, more just utility classes.





